<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.alien.mapper.SnailOrderMapper">
  <resultMap id="BaseResultMap" type="com.alien.entity.SnailOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="house_id" jdbcType="INTEGER" property="houseId" />
    <result column="room_id" jdbcType="INTEGER" property="roomId" />
    <result column="contract" jdbcType="VARCHAR" property="contract" />
      <result column="state" jdbcType="INTEGER" property="state" />
      <result column="pay_state" jdbcType="INTEGER" property="payState" />
    <result column="pay_money" jdbcType="DECIMAL" property="payMoney" />
    <result column="discount_money" jdbcType="DECIMAL" property="discountMoney" />
    <result column="live_time" jdbcType="TIMESTAMP" property="liveTime" />
    <result column="pay_time" jdbcType="TIMESTAMP" property="payTime" />
      <result column="pay_valid_time" jdbcType="TIMESTAMP" property="payValidTime" />
    <result column="valid_time" jdbcType="TIMESTAMP" property="validTime" />
    <result column="create_by" jdbcType="INTEGER" property="createBy" />
    <result column="update_by" jdbcType="INTEGER" property="updateBy" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="update_date" jdbcType="TIMESTAMP" property="updateDate" />
    <result column="del_flag" jdbcType="BIT" property="delFlag" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, house_id, room_id, contract, state, pay_state, pay_money, discount_money, live_time, pay_time, pay_valid_time ,valid_time,
   create_by, update_by, create_date, update_date, del_flag
  </sql>

    <select id="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from snail_order
        <where>
            del_flag = '0'
            <if test="state != null and state != ''">
                AND state = #{state,jdbcType=INTEGER}
            </if>
            <if test="payState != null and payState != ''">
                AND pay_state = #{payState,jdbcType=INTEGER}
            </if>
        </where>
        order by create_date DESC
    </select>

  <select id="select" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from snail_order
      <where>
          del_flag = '0'
          <if test="id != null and id != ''">
              AND id =  #{id,jdbcType=INTEGER}
          </if>
          <if test="userId != null and userId != ''">
              AND user_id =  #{userId,jdbcType=INTEGER}
          </if>
      </where>
  </select>

    <insert id="insert" parameterType="com.alien.entity.SnailOrder" useGeneratedKeys="true" keyProperty="id">
        insert into snail_order
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userId != null">
                user_id,
            </if>
            <if test="houseId != null">
                house_id,
            </if>
            <if test="roomId != null">
                room_id,
            </if>
            <if test="contract != null">
                contract,
            </if>
            <if test="state != null">
                state,
            </if>
            <if test="payState != null">
                pay_state,
            </if>
            <if test="payMoney != null">
                pay_money,
            </if>
            <if test="discountMoney != null">
                discount_money,
            </if>
            <if test="liveTime != null">
                live_time,
            </if>
            <if test="payTime != null">
                pay_time,
            </if>
            <if test="payValidTime != null">
                pay_valid_time,
            </if>
            <if test="validTime != null">
                valid_time,
            </if>
            <if test="createBy != null">
                create_by,
            </if>
            <if test="updateBy != null">
                update_by,
            </if>
            <if test="createDate != null">
                create_date,
            </if>
            <if test="updateDate != null">
                update_date,
            </if>
            <if test="delFlag != null">
                del_flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null">
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="houseId != null">
                #{houseId,jdbcType=INTEGER},
            </if>
            <if test="roomId != null">
                #{roomId,jdbcType=INTEGER},
            </if>
            <if test="contract != null">
                #{contract,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                #{state,jdbcType=INTEGER},
            </if>
            <if test="payState != null">
                #{payState,jdbcType=INTEGER},
            </if>
            <if test="payMoney != null">
                #{payMoney,jdbcType=DECIMAL},
            </if>
            <if test="discountMoney != null">
                #{discountMoney,jdbcType=DECIMAL},
            </if>
            <if test="liveTime != null">
                #{liveTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payTime != null">
                #{payTime,jdbcType=TIMESTAMP},
            </if>
            <if test="payValidTime != null">
                #{payValidTime,jdbcType=TIMESTAMP},
            </if>
            <if test="validTime != null">
                #{validTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createBy != null">
                #{createBy,jdbcType=INTEGER},
            </if>
            <if test="updateBy != null">
                #{updateBy,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="updateDate != null">
                #{updateDate,jdbcType=TIMESTAMP},
            </if>
            <if test="delFlag != null">
                #{delFlag,jdbcType=BIT},
            </if>
        </trim>
    </insert>

  <update id="update" parameterType="com.alien.entity.SnailOrder">
    update snail_order
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="houseId != null">
        house_id = #{houseId,jdbcType=INTEGER},
      </if>
      <if test="roomId != null">
        room_id = #{roomId,jdbcType=INTEGER},
      </if>
      <if test="payMoney != null">
        pay_money = #{payMoney,jdbcType=DECIMAL},
      </if>
      <if test="discountMoney != null">
        discount_money = #{discountMoney,jdbcType=DECIMAL},
      </if>
      <if test="liveTime != null">
        live_time = #{liveTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payTime != null">
        pay_time = #{payTime,jdbcType=TIMESTAMP},
      </if>
      <if test="validTime != null">
        valid_time = #{validTime,jdbcType=TIMESTAMP},
      </if>
      <if test="liveDay != null">
        live_day = #{liveDay,jdbcType=INTEGER},
      </if>
      <if test="createBy != null">
        create_by = #{createBy,jdbcType=INTEGER},
      </if>
      <if test="updateBy != null">
        update_by = #{updateBy,jdbcType=INTEGER},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null">
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="delFlag != null">
        del_flag = #{delFlag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

    <update id="delete">
		UPDATE snail_order a SET
			 a.del_flag = '1'
		WHERE  a.id = #{id}
	</update>

    <select id="count" resultType="java.lang.Long">
        select count(*) from snail_order
        <where>
            del_flag = '0'
        </where>
    </select>

    <update id="updatePayState">
		UPDATE snail_order a SET
			 a.pay_state = #{payState}
		WHERE  a.del_flag = '0'
		and a.id = #{id}
	</update>

    <update id="updateState">
		UPDATE snail_order a SET
			 a.state = #{state}
		WHERE  a.del_flag = '0'
		and a.id = #{id}
	</update>

</mapper>